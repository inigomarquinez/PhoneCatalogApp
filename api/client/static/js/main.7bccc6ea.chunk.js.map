{"version":3,"sources":["resources/logos/gs-logo.png","serviceWorker.js","components/Spinner/index.js","components/Spinner/Spinner.js","actions/index.js","components/PhonePreview/PhonePreview.js","components/PhonePreview/styles.css.js","components/PhonePreview/index.js","components/PhonePreview/PhonePreviewHOC.js","components/PhoneListContainer/PhoneListContainer.js","components/PhoneListContainer/PhoneListContainerHOC.js","components/PhoneListContainer/index.js","components/PhoneDetailComponent/PhoneDetailComponent.js","components/PhoneDetailComponent/styles.css.js","components/PhoneDetailComponent/PhoneDetailComponentHOC.js","components/PhoneDetailComponent/index.js","components/AppRouter/AppRouterHOC.js","components/AppRouter/index.js","components/App/App.js","components/App/App.css.js","components/App/AppHOC.js","components/App/index.js","reducers/index.js","index.js","store/configureAppStore.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Spinner","react_default","a","createElement","className","ACTIONS","SET_DATA_LOADED","SET_PHONE_LIST","SET_SELECTED_PHONE_ID","setSelectedPhoneId","payload","type","withStyles","theme","card","media","height","paddingTop","actions","display","_ref","classes","onLearnMoreClick","phone","Card_default","CardHeader_default","title","name","CardMedia_default","image","concat","protocol","thumbnail","CardContent_default","Typography_default","component","summary","CardActions_default","disableActionSpacing","TextField_default","variant","label","value","price","InputProps","readOnly","endAdornment","InputAdornment_default","position","Button_default","size","color","onClick","IconButton_default","aria-label","Favorite_default","PhonePreviewHOC","compose","connect","withHandlers","dispatch","id","PhonePreview","PhoneListContainer","brandList","filteredPhoneList","selectedBrands","setSelectedBrands","Fragment","FormControl_default","InputLabel_default","shrink","htmlFor","Select_default","onChange","e","target","input","Input_default","displayEmpty","multiple","map","brand","index","MenuItem_default","key","FormHelperText_default","Grid_default","container","direction","spacing","item","xs","sm","md","lg","xl","components_PhonePreview","ReduxConnector","state","phoneList","_","get","brands","uniq","PhoneListContainerHOC","defaultProps","withState","withPropsOnChange","isEmpty","filter","includes","withMobileDialog","gridList","flexWrap","transform","handleBuy","fullScreen","handleClose","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","DialogContent_default","GridList_default","cols","images","tile","GridListTile_default","src","alt","DialogContentText_default","year","description","DialogActions_default","autoFocus","selectedPhoneId","find","PhoneDetailComponentHOC","web","_ref2","PhoneDetailComponent","isDataLoaded","AppRouterHOC","branch","renderComponent","renderNothing","createMuiTheme","palette","primary","teal","secondary","pink","status","danger","header","padding","body","footer","textAlign","error","fetchData","styles","logo","AppRouter","console","log","aria-describedby","AppHOC","setError","axios","url","method","data","query","then","result","phones","setDataLoaded","catch","lifecycle","componentDidMount","this","props","App","initialState","rootReducer","arguments","length","undefined","action","Object","objectSpread","ReactDOM","render","es","store","createStore","applyMiddleware","thunkMiddleware","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bccc6ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gs-logo.296750d2.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Spinner from './Spinner';\nexport default Spinner;\n","/**\n * @file Spinner component to show while waiting for the data to be fetched from the back-end.\n */\n\nimport React from 'react';\n\nconst Spinner = () => (\n  <div>\n    <div>LOADING. PLEASE, WAIT.</div>\n    <div>\n      <i className=\"fas fa-spinner fa-pulse fa-10x\" />\n    </div>\n  </div>\n);\n\nexport default Spinner;\n","/**\n * @file Definition of the redux actions.\n */\n\nconst ACTIONS = {\n  SET_DATA_LOADED: 'SET_DATA_LOADED',\n  SET_PHONE_LIST: 'SET_PHONE_LIST',\n  SET_SELECTED_PHONE_ID: 'SET_SELECTED_PHONE_ID'\n};\n\nconst setDataLoaded = payload => ({\n  type: ACTIONS.SET_DATA_LOADED,\n  payload\n});\n\nconst setPhoneList = payload => ({\n  type: ACTIONS.SET_PHONE_LIST,\n  payload\n});\n\nconst setSelectedPhoneId = payload => ({\n  type: ACTIONS.SET_SELECTED_PHONE_ID,\n  payload\n});\n\nexport default ACTIONS;\nexport { setDataLoaded, setPhoneList, setSelectedPhoneId };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\n\nimport styles from './styles.css.js';\n\nconst PhonePreview = ({ classes, onLearnMoreClick, phone }) => (\n  <Card className={classes.card}>\n    <CardHeader title={phone.name} />\n    <CardMedia\n      className={classes.media}\n      image={`${window.location.protocol}//${window.location.hostname}:4000${phone.thumbnail}`}\n      title={phone.name}\n    />\n    <CardContent>\n      <Typography component=\"p\">{phone.summary}</Typography>\n    </CardContent>\n    <CardActions className={classes.actions} disableActionSpacing>\n      <TextField\n        variant=\"filled\"\n        label=\"From\"\n        value={phone.price}\n        InputProps={{\n          readOnly: true,\n          endAdornment: <InputAdornment position=\"end\">€</InputAdornment>\n        }}\n      />\n      <Button size=\"small\" color=\"primary\" onClick={onLearnMoreClick}>\n        Learn More\n      </Button>\n      <IconButton aria-label=\"Add to favorites\">\n        <FavoriteIcon />\n      </IconButton>\n      {/**\n      <IconButton aria-label=\"Share\">\n        <ShareIcon />\n      </IconButton>\n      */}\n    </CardActions>\n  </Card>\n);\n\n// const PhonePreview = ({ classes, onLearnMoreClick, phone }) => (\n//   <Card className={classes.card}>\n//     <CardActionArea>\n//       <CardMedia\n//         className={classes.media}\n//         image={`${window.location.protocol}//${window.location.hostname}:4000${phone.thumbnail}`}\n//         title={phone.name}\n//       />\n//       <CardContent>\n//         <Typography gutterBottom variant=\"h5\" component=\"h2\">\n//           {phone.name}\n//         </Typography>\n//         <Typography component=\"p\">{phone.summary}</Typography>\n//       </CardContent>\n//     </CardActionArea>\n//     <CardActions className={classes.actions}>\n//       <TextField\n//         variant=\"filled\"\n//         label=\"From\"\n//         value={phone.price}\n//         InputProps={{\n//           readOnly: true,\n//           endAdornment: <InputAdornment position=\"end\">€</InputAdornment>\n//         }}\n//       />\n//       <Button size=\"small\" color=\"primary\" onClick={onLearnMoreClick}>\n//         Learn More\n//       </Button>\n//     </CardActions>\n//   </Card>\n// );\n\nPhonePreview.propTypes = {\n  classes: PropTypes.object.isRequired,\n  phone: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(PhonePreview);\n","export default theme => ({\n  card: {\n    //maxWidth: 400\n  },\n  media: {\n    height: 200,\n    paddingTop: '56.25%' // 16:9\n  },\n  actions: {\n    display: 'flex'\n  }\n});\n","import PhonePreviewHOC from './PhonePreviewHOC';\nexport default PhonePreviewHOC;","import { connect } from 'react-redux';\nimport { compose, withHandlers } from 'recompose';\n\nimport { setSelectedPhoneId } from '../../actions';\nimport PhonePreview from './PhonePreview';\n\nexport default compose(\n  connect(\n    null,\n    null\n  ),\n  withHandlers({\n    onLearnMoreClick: ({ dispatch, phone }) => () => {\n      dispatch(setSelectedPhoneId(phone.id));\n    }\n  })\n)(PhonePreview);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport Input from '@material-ui/core/Input';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\n\nimport PhonePreview from '../PhonePreview';\n\nconst PhoneListContainer = ({ brandList, filteredPhoneList, selectedBrands, setSelectedBrands }) => (\n  <React.Fragment>\n    \n    <FormControl>\n      <InputLabel shrink htmlFor=\"brand-label-placeholder\">\n        Brand\n      </InputLabel>\n      <Select\n        value={selectedBrands}\n        onChange={e => setSelectedBrands(e.target.value)}\n        input={<Input name=\"brand\" id=\"brand-label-placeholder\" />}\n        displayEmpty\n        multiple\n        name=\"brand\">\n        {brandList.map((brand, index) => (\n          <MenuItem key={index} value={brand}>{brand}</MenuItem>\n        ))}\n      </Select>\n      <FormHelperText>You can filter by brand</FormHelperText>\n    </FormControl>\n    <Grid container direction=\"row\" spacing={16}>\n      {filteredPhoneList.map((phone, index) => (\n        <Grid item key={index} xs={12} sm={6} md={4} lg={3} xl={2}>\n          <PhonePreview phone={phone} />\n        </Grid>\n      ))}\n    </Grid>\n  </React.Fragment>\n);\n\nexport default PhoneListContainer;\n","import _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { compose, defaultProps, withPropsOnChange, withState } from 'recompose';\n\nimport PhoneListContainer from './PhoneListContainer';\n\nconst mapStateToProps = state => {\n  const phoneList = _.get(state, 'phoneList');\n  const brands = _.map(phoneList, 'brand');\n\n  return {\n    brandList: _.uniq(brands),\n    phoneList\n  };\n};\n\nconst mapDispatchToProps = null;\n\nconst ReduxConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  ReduxConnector,\n  defaultProps({\n    brandList: [],\n    phoneList: []\n  }),\n  withState('selectedBrands', 'setSelectedBrands', []),\n  withPropsOnChange(['selectedBrands'], ({ phoneList, selectedBrands }) => ({\n    filteredPhoneList: _.isEmpty(selectedBrands)\n      ? phoneList\n      : _.filter(phoneList, phone => {\n          return _.includes(selectedBrands, phone.brand);\n        })\n  }))\n)(PhoneListContainer);\n","import PhoneListContainerHOC from './PhoneListContainerHOC';\nexport default PhoneListContainerHOC;\n","import { withStyles } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport withMobileDialog from '@material-ui/core/withMobileDialog';\n\nimport styles from './styles.css.js';\n\nconst PhoneDetailComponent = ({ classes, fullScreen, handleBuy, handleClose, phone }) => (\n  <Dialog\n    fullScreen={true}\n    open={true}\n    onClose={handleClose}\n    aria-labelledby=\"responsive-dialog-title\">\n    <DialogTitle id=\"responsive-dialog-title\">{phone.name}</DialogTitle>\n    <DialogContent>\n      <GridList className={classes.gridList} cols={1}>\n        {phone.images.map((tile, index) => (\n          <GridListTile key={index}>\n            <img\n              src={`${window.location.protocol}//${window.location.hostname}:4000${tile}`}\n              alt=\"\"\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      <DialogContentText>Brand: {phone.brand}</DialogContentText>\n      <DialogContentText>Launch year: {phone.year}</DialogContentText>\n      <DialogContentText>{phone.description}</DialogContentText>\n      <DialogContentText>{phone.price}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={handleBuy} color=\"primary\">\n        Buy\n      </Button>\n      <Button onClick={handleClose} color=\"primary\" autoFocus>\n        Close\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nPhoneDetailComponent.propTypes = {\n  fullScreen: PropTypes.bool.isRequired\n};\n\nexport default withMobileDialog()(withStyles(styles)(PhoneDetailComponent));\n","export default {\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  }\n};\n","import _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { compose, withHandlers } from 'recompose';\n\nimport { setSelectedPhoneId } from '../../actions';\nimport PhoneDetailComponent from './PhoneDetailComponent';\n\nconst mapStateToProps = state => {\n  const phoneList = _.get(state, 'phoneList');\n  const selectedPhoneId = _.get(state, 'selectedPhoneId');\n\n  return {\n    phone: _.find(phoneList, ['id', selectedPhoneId])\n  };\n};\n\nconst mapDispatchToProps = null;\n\nconst ReduxConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  ReduxConnector,\n  withHandlers({\n    handleBuy: ({ phone }) => () => {\n      window.open(phone.web, '_blank');\n    },\n    handleClose: ({ dispatch }) => () => {\n      dispatch(setSelectedPhoneId(null));\n    }\n  })\n)(PhoneDetailComponent);\n","import PhoneDetailComponentHOC from './PhoneDetailComponentHOC';\nexport default PhoneDetailComponentHOC;\n","import _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { branch, compose, renderComponent, renderNothing } from 'recompose';\n\nimport Spinner from '../Spinner';\nimport PhoneListContainer from '../PhoneListContainer';\nimport PhoneDetailComponent from '../PhoneDetailComponent';\n\nconst mapStateToProps = state => ({\n  isDataLoaded: _.get(state, 'isDataLoaded'),\n  phoneList: _.get(state, 'phoneList'),\n  selectedPhoneId: _.get(state, 'selectedPhoneId')\n});\nconst mapDispatchToProps = null;\n\nconst ReduxConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  ReduxConnector,\n  branch(({ isDataLoaded }) => !isDataLoaded, renderComponent(Spinner)),\n  branch(\n    ({ selectedPhoneId }) => selectedPhoneId === null,\n    renderComponent(PhoneListContainer),\n    renderComponent(PhoneDetailComponent)\n  )\n)(renderNothing());\n\n\n","import AppRouterHOC from './AppRouterHOC';\nexport default AppRouterHOC;","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\nimport teal from '@material-ui/core/colors/teal';\n\nimport AppRouter from '../AppRouter';\n\nimport logo from '../../resources/logos/gs-logo.png';\n\n//import './App.css';\nimport styles from './App.css.js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: pink\n  },\n  status: {\n    danger: 'orange'\n  }\n});\n\nconst App = ({ classes, error, fetchData }) => (\n  <MuiThemeProvider theme={theme}>\n    <header className={classes.header}>\n      <img src={logo} alt=\"gs-logo\" height=\"100\" />\n      PhoneCatalogApp\n    </header>\n    <div className={classes.body}>\n      <AppRouter />\n      <Dialog\n        open={error !== null}\n        onClose={() => console.log('handleClose')}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{'Error'}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">{error}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClose={() => console.log('handleClose')} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={fetchData} color=\"primary\" autoFocus>\n            Try again\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n    <footer className={classes.footer}>Contact Us</footer>\n  </MuiThemeProvider>\n);\n\nexport default withStyles(styles)(App);\n","export default {\n  header: {\n    padding: '15px'\n  },\n  body: {\n    padding: '15px'\n  },\n  footer: {\n    padding: '15px',\n    textAlign: 'right'\n  }\n};","import { connect } from 'react-redux';\nimport { compose, lifecycle, withHandlers, withState } from 'recompose';\nimport axios from 'axios';\n\nimport App from './App';\nimport { setDataLoaded, setPhoneList } from '../../actions';\n\nconst mapStateToProps = null;\nconst mapDispatchToProps = null;\n\nconst ReduxConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport default compose(\n  ReduxConnector,\n  withState('error', 'setError', null),\n  withHandlers({\n    fetchData: ({ dispatch, setError }) => () => {\n      console.log(\n        `Fetching data from ${window.location.protocol}//${window.location.hostname}:4000/phones`\n      );\n      axios({\n        url: `${window.location.protocol}//${window.location.hostname}:4000/phones`,\n        method: 'post',\n        data: {\n          query: `\n            query Phones {\n              phones {\n                id,\n                brand,\n                colors,\n                description,\n                images,\n                name,\n                price,\n                summary,\n                thumbnail,\n                web,\n                year\n              } \n           }\n            `\n        }\n      })\n        .then(result => {\n          setError(null);\n          dispatch(setPhoneList(result.data.data.phones));\n          dispatch(setDataLoaded(true));\n        })\n        .catch(error => {\n          console.log(error);\n          setError('error');\n        });\n    }\n  }),\n  lifecycle({\n    componentDidMount() {\n      this.props.fetchData();\n    }\n  })\n)(App);\n","import AppHOC from './AppHOC';\nexport default AppHOC;\n","/**\n * @file Definition of the redux reducers.\n */\nimport ACTIONS from '../actions';\n\n// Initial state\nconst initialState = {\n  isDataLoaded: false,\n  phoneList: [],\n  selectedPhoneId: null\n};\n\n// Root reducer\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIONS.SET_DATA_LOADED:\n      return { ...state, isDataLoaded: action.payload };\n\n    case ACTIONS.SET_PHONE_LIST:\n      return { ...state, phoneList: action.payload };\n\n    case ACTIONS.SET_SELECTED_PHONE_ID:\n      return { ...state, selectedPhoneId: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n\n// import { createReducer } from 'redux-starter-kit';\n\n// import { setDataLoaded, setPhoneList, setSelectedPhoneId } from '../actions';\n\n// // Initial state\n// const initialState = {\n//   isDataLoaded: false,\n//   phoneList: [],\n//   selectedPhoneId: null\n// };\n\n// // Reducers\n// const rootReducer = createReducer(initialState, {\n//   [setDataLoaded]: (state, action) => {\n//     return { ...state, isDataLoaded: action.payload };\n//   },\n//   [setPhoneList]: (state, action) => {\n//     return { ...state, phoneList: action.payload };\n//   },\n//   [setSelectedPhoneId]: (state, action) => {\n//     return { ...state, selectedPhoneId: action.payload };\n//   }\n// });\n\n// export default rootReducer;\n","/**\n * @file Application entry point.\n */\n\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport configureAppStore from './store/configureAppStore';\n\n// FontAwesome icons (https://fontawesome.com/)\nimport '@fortawesome/fontawesome-free/js/all.min';\n\nReactDOM.render(\n  <Provider store={configureAppStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Configuration of the redux store.\n */\n\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from '../reducers'\n\nexport default () => {\n  if (process.env.NODE_ENV === 'production') {\n    return createStore(\n      rootReducer,\n      applyMiddleware(\n        thunkMiddleware // lets us dispatch() functions\n      )\n    );\n  } else {\n    const { createLogger } = require('redux-logger');\n\n    const loggerMiddleware = createLogger();\n\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    const store = createStore(\n      rootReducer,\n      composeEnhancers(\n        applyMiddleware(\n          thunkMiddleware, // lets us dispatch() functions\n          loggerMiddleware // neat middleware that logs actions\n        )\n      )\n    );\n\n    console.log('Initial redux state: %o', store.getState());\n\n    return store;\n  }\n};\n\n// import { configureStore, getDefaultMiddleware } from 'redux-starter-kit';\n// import rootReducer from '../reducers';\n\n// export default function configureAppStore(preloadedState) {\n//   let loggerMiddleware = null;\n//   if (process.env.NODE_ENV !== 'production') {\n//     const { createLogger } = require('redux-logger');\n//     loggerMiddleware = createLogger();\n//   }\n\n//   const store = configureStore({\n//     // A single reducer function that will be used as the root reducer,\n//     // or an object of slice reducers that will be passed to combineReducers()\n//     reducer: rootReducer,\n//     // An array of Redux middlewares.  If not supplied, uses getDefaultMiddleware()\n//     middleware: [...getDefaultMiddleware(), loggerMiddleware],\n//     // Enable support for the Redux DevTools Extension. Defaults to true.\n//     devTools: true,\n//     // Same as current createStore.\n//     preloadedState\n//     // An optional array of Redux store enhancers\n//     //enhancers: ReduxStoreEnhancer[],\n//   });\n\n//   console.log('Initial redux state: %o', store.getState());\n\n//   return store;\n// }\n"],"sourceRoot":""}